brlens[(length(leftstr$height)+1):i]<-rightstr$height
height<-rexp(1,rate=i*(i-1)/theta)+ node.height(rootnode,nodematrix,nspecies)
father<-nodematrix[rootnode,1]
if(father == -9 | father == -8)
fatherheight<-100000 else
fatherheight <- node.height(father,nodematrix,nspecies)
brlens
while(height<fatherheight){
nodematrix[rootnode,6]<-nodematrix[rootnode,6]+1
##randomly choose two nodes
b<-sample(1:i,2)
##update groups
newname<-paste("(",treestr[b[1]],sep="")
newname<-paste(newname,":",sep="")
newname<-paste(newname,round(height-brlens[b[1]],6),sep="")
newname<-paste(newname,",",sep="")
newname<-paste(newname,treestr[b[2]],sep="")
newname<-paste(newname,":",sep="")
newname<-paste(newname,round(height-brlens[b[2]],6),sep="")
newname<-paste(newname,")",sep="")
treestr[b[1]]<-newname
brlens[b[1]]<-height
##update dist,treestr, and branch length
index<-1:i
index[b[2]]<-0
index<-index[index>0]
treestr<-treestr[index]
brlens<-brlens[index]
if(i==2)
break
i<-i-1
height<-height+rexp(1,rate=i*(i-1)/theta)
}
if(nodematrix[rootnode,1]==-9 | nodematrix[rootnode,1]==-8)
treestr<-paste(treestr,";",sep="")
z<-list(gt="", height=as.matrix,node=as.matrix)
z$gt<-treestr
z$node<-nodematrix
z$height<-brlens
return(z)
}
}
## Not run:
# Generate a random tree with exponentially varying lambda & mu
# for(Ntips in c(rep(20,100),rep(100,100),rep(1000,100))){
Ntips = 20
rho = 1 # sampling fraction
time_grid = seq(from=0, to=100, by=0.01)
# for(lambdas in list(20+(100/tail(exp(0.1*time_grid),1))*exp(0.1*time_grid),0.2*time_grid+0.5,rep(2,length(time_grid)))){
lambdas=rep(2,length(time_grid))
mus = 0*time_grid
sim = castor::generate_random_tree( parameters = list(rarefaction=rho),
max_tips = Ntips/rho,
# as_generations = TRUE,
coalescent = FALSE,
added_rates_times = time_grid,
added_birth_rates_pc = lambdas,added_death_rates_pc = mus)
bigtree = sim[["tree"]]
root_age = castor::get_tree_span(bigtree)[["max_distance"]]
cat(sprintf("Tree has %d tips, spans %g Myr\n",length(bigtree[["tip.label"]]),root_age))
ape::plot.phylo(bigtree)
title("speciestree")
results = castor::get_clade_list(bigtree, postorder=TRUE, missing_value=-9)
nodematrix = list(nodes=cbind(results$clades, results$lengths,
matrix(-9,nrow=nrow(results$clades),ncol=3)),names=bigtree$tip.label, root=TRUE)
for(i in 1:nrow(nodematrix[["nodes"]])){
nodematrix[["nodes"]][i,5]=runif(1,min=10^8,max=10^9)
}
for(i in 1:nrow(nodematrix[["nodes"]])){
nodematrix[["nodes"]][i,5]=runif(1,min=10^8,max=10^9)
}
nspecies=length(bigtree[["tip.label"]])
rootnode=nrow(nodematrix[["nodes"]])
genetreestuff=sim.coaltree.sp(rootnode,nodematrix[["nodes"]],nspecies,seq=rep(1,nspecies),name=bigtree[["tip.label"]])
genetreestuff=sim.coaltree.sp(rootnode,nodematrix[["nodes"]],nspecies,seq=rep(1,nspecies),name=bigtree[["tip.label"]])
# }
# }
# }
# }
# }
genetreestuff
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
require("castor")
require("phybase")
require("ggtree")
require("treeAGG")
require("ape")
`simcoal` = function(rootnode,nodematrix,nspecies,seq,name)
{
theta<-nodematrix[rootnode,5]
if(rootnode<=nspecies){
{if(seq[rootnode] == 1){
z<-list(gt="", height=as.matrix, node=as.matrix)
z$gt<-name[rootnode]
z$height<-0
z$node<-nodematrix
return(z)}
else{
treestr<-paste(name[rootnode],"s",1:seq[rootnode],sep="")
i<-seq[rootnode]
height<-rexp(1,rate=i*(i-1)/theta)
brlens<-rep(0,i)
father<-nodematrix[rootnode,1]
fatherheight <- node.height(father,nodematrix,nspecies)
while(height<fatherheight){
nodematrix[rootnode,6]<-nodematrix[rootnode,6]+1
##randomly choose two nodes
b<-sample(1:i,2)
##update groups
newname<-paste("(",treestr[b[1]],sep="")
newname<-paste(newname,":",sep="")
newname<-paste(newname,round(height-brlens[b[1]],6),sep="")
newname<-paste(newname,",",sep="")
newname<-paste(newname,treestr[b[2]],sep="")
newname<-paste(newname,":",sep="")
newname<-paste(newname,round(height-brlens[b[2]],6),sep="")
newname<-paste(newname,")",sep="")
treestr[b[1]]<-newname
brlens[b[1]]<-height
##update dist,treestr, and branch length
index<-1:i
index[b[2]]<-0
index<-index[index>0]
treestr<-treestr[index]
brlens<-brlens[index]
if(i==2)
break
i<-i-1
height<-height+rexp(1,rate=i*(i-1)/theta)
}
z<-list(gt="", height=as.matrix,node=as.matrix)
z$gt<-treestr
z$height<-brlens
z$node<-nodematrix
return(z)
}
}
}
if(rootnode>nspecies){
son1<-nodematrix[rootnode,2]
son2<-nodematrix[rootnode,3]
leftstr<-sim.coaltree.sp(rootnode=son1,nodematrix=nodematrix,nspecies,seq,name)
nodematrix<-leftstr$node
rightstr<-sim.coaltree.sp(rootnode=son2,nodematrix=nodematrix,nspecies,seq,name)
nodematrix<-rightstr$node
i<-length(leftstr$gt)+length(rightstr$gt)
treestr<-1:i
treestr[1:length(leftstr$gt)]<-leftstr$gt
treestr[(length(leftstr$gt)+1):i]<-rightstr$gt
brlens<-1:i
brlens[1:length(leftstr$height)]<-leftstr$height
brlens[(length(leftstr$height)+1):i]<-rightstr$height
height<-rexp(1,rate=i*(i-1)/theta)+ node.height(rootnode,nodematrix,nspecies)
father<-nodematrix[rootnode,1]
if(father == -9 | father == -8)
fatherheight<-100000 else
fatherheight <- node.height(father,nodematrix,nspecies)
brlens
while(height<fatherheight){
nodematrix[rootnode,6]<-nodematrix[rootnode,6]+1
##randomly choose two nodes
b<-sample(1:i,2)
##update groups
newname<-paste("(",treestr[b[1]],sep="")
newname<-paste(newname,":",sep="")
newname<-paste(newname,round(height-brlens[b[1]],6),sep="")
newname<-paste(newname,",",sep="")
newname<-paste(newname,treestr[b[2]],sep="")
newname<-paste(newname,":",sep="")
newname<-paste(newname,round(height-brlens[b[2]],6),sep="")
newname<-paste(newname,")",sep="")
treestr[b[1]]<-newname
brlens[b[1]]<-height
##update dist,treestr, and branch length
index<-1:i
index[b[2]]<-0
index<-index[index>0]
treestr<-treestr[index]
brlens<-brlens[index]
if(i==2)
break
i<-i-1
height<-height+rexp(1,rate=i*(i-1)/theta)
}
if(nodematrix[rootnode,1]==-9 | nodematrix[rootnode,1]==-8)
treestr<-paste(treestr,";",sep="")
z<-list(gt="", height=as.matrix,node=as.matrix)
z$gt<-treestr
z$node<-nodematrix
z$height<-brlens
return(z)
}
}
## Not run:
# Generate a random tree with exponentially varying lambda & mu
# for(Ntips in c(rep(20,100),rep(100,100),rep(1000,100))){
Ntips = 20
rho = 1 # sampling fraction
time_grid = seq(from=0, to=100, by=0.01)
# for(lambdas in list(20+(100/tail(exp(0.1*time_grid),1))*exp(0.1*time_grid),0.2*time_grid+0.5,rep(2,length(time_grid)))){
lambdas=rep(2,length(time_grid))
mus = 0*time_grid
sim = castor::generate_random_tree( parameters = list(rarefaction=rho),
max_tips = Ntips/rho,
# as_generations = TRUE,
coalescent = FALSE,
added_rates_times = time_grid,
added_birth_rates_pc = lambdas,added_death_rates_pc = mus)
bigtree = sim[["tree"]]
root_age = castor::get_tree_span(bigtree)[["max_distance"]]
cat(sprintf("Tree has %d tips, spans %g Myr\n",length(bigtree[["tip.label"]]),root_age))
ape::plot.phylo(bigtree)
title("speciestree")
results = castor::get_clade_list(bigtree, postorder=TRUE, missing_value=-9)
nodematrix = list(nodes=cbind(results$clades, results$lengths,
matrix(-9,nrow=nrow(results$clades),ncol=3)),names=bigtree$tip.label, root=TRUE)
for(i in 1:nrow(nodematrix[["nodes"]])){
nodematrix[["nodes"]][i,5]=runif(1,min=10^8,max=10^9)
}
nspecies=length(bigtree[["tip.label"]])
rootnode=nrow(nodematrix[["nodes"]])
genetreestuff=simcoal(rootnode,nodematrix[["nodes"]],nspecies,seq=rep(1,nspecies),name=bigtree[["tip.label"]])
require("castor")
require("phybase")
require("ggtree")
require("treeAGG")
require("ape")
`simcoal` = function(rootnode,nodematrix,nspecies,seq,name)
{
theta<-nodematrix[rootnode,5]
if(rootnode<=nspecies){
{if(seq[rootnode] == 1){
z<-list(gt="", height=as.matrix, node=as.matrix)
z$gt<-name[rootnode]
z$height<-0
z$node<-nodematrix
return(z)}
else{
treestr<-paste(name[rootnode],"s",1:seq[rootnode],sep="")
i<-seq[rootnode]
height<-rexp(1,rate=i*(i-1)/theta)
brlens<-rep(0,i)
father<-nodematrix[rootnode,1]
fatherheight <- node.height(father,nodematrix,nspecies)
while(height<fatherheight){
nodematrix[rootnode,6]<-nodematrix[rootnode,6]+1
##randomly choose two nodes
b<-sample(1:i,2)
##update groups
newname<-paste("(",treestr[b[1]],sep="")
newname<-paste(newname,":",sep="")
newname<-paste(newname,round(height-brlens[b[1]],6),sep="")
newname<-paste(newname,",",sep="")
newname<-paste(newname,treestr[b[2]],sep="")
newname<-paste(newname,":",sep="")
newname<-paste(newname,round(height-brlens[b[2]],6),sep="")
newname<-paste(newname,")",sep="")
treestr[b[1]]<-newname
brlens[b[1]]<-height
##update dist,treestr, and branch length
index<-1:i
index[b[2]]<-0
index<-index[index>0]
treestr<-treestr[index]
brlens<-brlens[index]
if(i==2)
break
i<-i-1
height<-height+rexp(1,rate=i*(i-1)/theta)
}
z<-list(gt="", height=as.matrix,node=as.matrix)
z$gt<-treestr
z$height<-brlens
z$node<-nodematrix
return(z)
}
}
}
if(rootnode>nspecies){
son1<-nodematrix[rootnode,2]
son2<-nodematrix[rootnode,3]
leftstr<-sim.coaltree.sp(rootnode=son1,nodematrix=nodematrix,nspecies,seq,name)
nodematrix<-leftstr$node
rightstr<-sim.coaltree.sp(rootnode=son2,nodematrix=nodematrix,nspecies,seq,name)
nodematrix<-rightstr$node
i<-length(leftstr$gt)+length(rightstr$gt)
treestr<-1:i
treestr[1:length(leftstr$gt)]<-leftstr$gt
treestr[(length(leftstr$gt)+1):i]<-rightstr$gt
brlens<-1:i
brlens[1:length(leftstr$height)]<-leftstr$height
brlens[(length(leftstr$height)+1):i]<-rightstr$height
height<-rexp(1,rate=i*(i-1)/theta)+ node.height(rootnode,nodematrix,nspecies)
father<-nodematrix[rootnode,1]
if(father == -9 | father == -8)
fatherheight<-100000 else
fatherheight <- node.height(father,nodematrix,nspecies)
brlens
while(height<fatherheight){
nodematrix[rootnode,6]<-nodematrix[rootnode,6]+1
##randomly choose two nodes
b<-sample(1:i,2)
##update groups
newname<-paste("(",treestr[b[1]],sep="")
newname<-paste(newname,":",sep="")
newname<-paste(newname,round(height-brlens[b[1]],6),sep="")
newname<-paste(newname,",",sep="")
newname<-paste(newname,treestr[b[2]],sep="")
newname<-paste(newname,":",sep="")
newname<-paste(newname,round(height-brlens[b[2]],6),sep="")
newname<-paste(newname,")",sep="")
treestr[b[1]]<-newname
brlens[b[1]]<-height
##update dist,treestr, and branch length
index<-1:i
index[b[2]]<-0
index<-index[index>0]
treestr<-treestr[index]
brlens<-brlens[index]
if(i==2)
break
i<-i-1
height<-height+rexp(1,rate=i*(i-1)/theta)
}
if(nodematrix[rootnode,1]==-9 | nodematrix[rootnode,1]==-8)
treestr<-paste(treestr,";",sep="")
z<-list(gt="", height=as.matrix,node=as.matrix)
z$gt<-treestr
z$node<-nodematrix
z$height<-brlens
return(z)
}
}
## Not run:
# Generate a random tree with exponentially varying lambda & mu
# for(Ntips in c(rep(20,100),rep(100,100),rep(1000,100))){
Ntips = 20
rho = 1 # sampling fraction
time_grid = seq(from=0, to=100, by=0.01)
# for(lambdas in list(20+(100/tail(exp(0.1*time_grid),1))*exp(0.1*time_grid),0.2*time_grid+0.5,rep(2,length(time_grid)))){
lambdas=rep(2,length(time_grid))
mus = 0*time_grid
sim = castor::generate_random_tree( parameters = list(rarefaction=rho),
max_tips = Ntips/rho,
# as_generations = TRUE,
coalescent = FALSE,
added_rates_times = time_grid,
added_birth_rates_pc = lambdas,added_death_rates_pc = mus)
bigtree = sim[["tree"]]
root_age = castor::get_tree_span(bigtree)[["max_distance"]]
cat(sprintf("Tree has %d tips, spans %g Myr\n",length(bigtree[["tip.label"]]),root_age))
ape::plot.phylo(bigtree)
title("speciestree")
results = castor::get_clade_list(bigtree, postorder=TRUE, missing_value=-9)
nodematrix = list(nodes=cbind(results$clades, results$lengths,
matrix(-9,nrow=nrow(results$clades),ncol=3)),names=bigtree$tip.label, root=TRUE)
for(i in 1:nrow(nodematrix[["nodes"]])){
nodematrix[["nodes"]][i,5]=runif(1,min=10^8,max=10^9)
}
nspecies=length(bigtree[["tip.label"]])
rootnode=nrow(nodematrix[["nodes"]])
genetreestuff=simcoal(rootnode,nodematrix[["nodes"]],nspecies,seq=rep(1,nspecies),name=bigtree[["tip.label"]])
debugSource('~/Desktop/ProjectScripts/simcoaltreedebug.R')
debugSource('~/Desktop/ProjectScripts/simcoaltreedebug.R')
View(simcoal)
debugSource('~/Desktop/ProjectScripts/simcoaltreedebug.R')
debugSource('~/Desktop/ProjectScripts/simcoaltreedebug.R')
debugSource('~/Desktop/ProjectScripts/simcoaltreedebug.R')
debugSource('~/Desktop/ProjectScripts/simcoaltreedebug.R')
source('~/Desktop/ProjectScripts/PSixPDRModified.R')
genetreeheight
genetreegt
source('~/Desktop/ProjectScripts/PSixPDRModified.R')
source('~/Desktop/ProjectScripts/PSixPDRModified.R')
source('~/Desktop/ProjectScripts/PSixPDRModified.R')
genetreegt
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
genetreegt
genetreestuff$gt
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
genetreestuff$gt
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
genetreestuff$gt
genetreestuff$heignt
genetreestuff$height
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
trunc(runif(1,min=10^8,max=10^9),prec=2)
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
nodematrxi$nodes
nodematrix$nodes
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
genetreestuff$height
formatC(genetreestuff$height)
6.225*10^8
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
fit[["fitted_LTT"]]
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
fitpdr[["fitted_PDR"]]
time_grid
tail(time_grid)
lambda_slopes
tail(lambda_slopes)
lambdas
tail(lambdas)
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
plot( x = fitpdr[["age_grid"]],
y = fitpdr[["fitted_PDR"]],
main = 'Fitted & true PDR',
xlab = 'age',
ylab = 'PDR',
type = 'b',
col = 'red',
xlim = c(genetreeheight,0),
ylim=c(-100,100))
plot( x = fitpdr[["age_grid"]],
y = fitpdr[["fitted_PDR"]],
main = 'Fitted & true PDR',
xlab = 'age',
ylab = 'PDR',
type = 'b',
col = 'red',
xlim = c(genetreeheight,0),
plot( x = fitpdr[["age_grid"]],
y = fitpdr[["fitted_PDR"]],
main = 'Fitted & true PDR',
xlab = 'age',
ylab = 'PDR',
type = 'b',
col = 'red',
xlim = c(genetreeheight,0)
plot( x = fitpdr[["age_grid"]],
y = fitpdr[["fitted_PDR"]],
main = 'Fitted & true PDR',
xlab = 'age',
ylab = 'PDR',
type = 'b',
col = 'red',
xlim = c(genetreeheight,0))
plot( x = fitpdr[["age_grid"]],
y = fitpdr[["fitted_PDR"]],
main = 'Fitted & true PDR',
xlab = 'age',
ylab = 'PDR',
type = 'b',
col = 'red',
xlim = c(genetreeheight,0),)
plot( x = fitpdr[["age_grid"]],
y = fitpdr[["fitted_PDR"]],
main = 'Fitted & true PDR',
xlab = 'age',
ylab = 'PDR',
type = 'b',
col = 'red',
xlim = c(genetreeheight,0),ylim=c(0,tail(fitpdr[["fitted_PDR"]],1)))
tail(fitpdr[["fitted_PDR"]],1)
fitpdr[["fitted_PDR"]]
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
fitpdr[["fitted_PDR"]]
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
help(phybase::sim.coaltree.sp.mu)
help("sim.coaltree.sp.mu")
source('~/Desktop/ProjectScripts/PSixPDRModified.R')
bigtree[["tip.label"]]
-c("A","B","C","D")
c("A","B","C","D")
source('~/Desktop/ProjectScripts/PSixPDRModified.R')
source('~/Desktop/ProjectScripts/PSixPDRModified.R')
source('~/Desktop/ProjectScripts/PSixPDRModified.R')
source('~/Desktop/ProjectScripts/PSixPDRModified.R')
source('~/Desktop/ProjectScripts/PSixPDRModified.R')
source('~/Desktop/ProjectScripts/PSixPDRModified.R')
source('~/Desktop/ProjectScripts/PSixPDRModified.R')
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
source('~/Desktop/ProjectScripts/simcoaltreespmudebug.R')
source('~/Desktop/ProjectScripts/simcoaltreespmudebug.R')
source('~/Desktop/ProjectScripts/simcoaltreespmudebug.R')
source('~/Desktop/ProjectScripts/simcoaltreespmudebug.R')
source('~/Desktop/ProjectScripts/simcoaltreespmudebug.R')
source('~/Desktop/ProjectScripts/simcoaltreespmudebug.R')
source('~/Desktop/ProjectScripts/simcoaltreespmudebug.R')
source('~/Desktop/ProjectScripts/simcoaltreespmudebug.R')
source('~/Desktop/ProjectScripts/simcoaltreespmudebug.R')
source('~/Desktop/ProjectScripts/simcoaltreespmudebug.R')
source('~/Desktop/ProjectScripts/simcoaltreespmudebug.R')
plot.phylo(noclock$gt)
plot.phylo(noclock[["gt"}})
plot.phylo(noclock[["gt"]])
noclock
noclock$gt
plot.phylo(noclock$gt)
plot.phylo("((((4:2.480468,(5:0.861984,6:0.922413):0.141299):0.176696,((20:0.002239,19:0.001195):0.575464,(7:0.477919,((8:0.092274,((13:0.06167,14:0.051484):0.099839,(11:0.048874,10:0.072376):0.00817):0.07627):0.042442,(9:0.172147,((18:0.014337,17:0.011841):0.040134,12:0.070768):0.093813):0.040306):0.282703):0.053554):2.584877):0.002965,1:1.539774):0.306315,((2:0.10238,3:0.0757):2.520549,(16:0.024852,15:0.05313):1.136756):0.00951);")
read_tree(noclock$gt)
genetree=read_tree(noclock$gt)
plot.phylo(genetree)
source('~/Desktop/ProjectScripts/simcoaltreespmudebug.R')
source('~/Desktop/ProjectScripts/simcoaltreespmudebug.R')
source('~/Downloads/phybase/R/sim.coaltree.sp.mu.R')
source('~/Desktop/ProjectScripts/simcoaltreedebug.R')
